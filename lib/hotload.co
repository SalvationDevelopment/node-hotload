PATH   = require \path
fs     = require \fs
colors = require \colors
crypto = require \crypto
stack  = require \callsite
Optional  = require \./optional.js

l = !-> console.log "--".yellow.bold, it

resolveCalledFilename = let
	MODULE = require("module")
	(request, stackLevel)->
		moduleFilename = stack()[stackLevel].getFileName()
		MODULE._resolveFilename(request, require.cache[moduleFilename])

hashSums     = {}
fileWatchers = {}

headStr      = -> it.substr(0,7)
onFileChange = require \./onFileChange.js

# onFileChange handlers
fileHandlers = {}

moduleLoader = (relPath, absPath, callback)->
	ret = Optional.absent()
	try
		l "(#relPath) Begin output"
		m = require absPath
		ret := Optional.of(m)
		l "(#relPath) End output"
		l "(#relPath) Module loaded successfully"
		callback?(,ret)
	catch ex
		l "(#relPath) End output"
		l ("(#relPath) Error loading module: "+ex.message).red.bold
		callback?(,ret)

	return ret

module.exports = (path,callback,args)->

	if typeof args is \undefined
		if typeof callback is not \function
			args := callback

	args := if Array.isArray(args) then args else []

	absPath = resolveCalledFilename path, 2
	mainDir = PATH.dirname require.main.filename
	relPath = PATH.relative mainDir, absPath

	# First load case
	if not require.cache[absPath]?

		l "Loading #absPath"

		moduleOptional = moduleLoader(relPath, absPath)

		if not moduleOptional.isPresent()
			_module = {
				error: true
			}
		else
			_module = moduleOptional.get()

		if typeof _module is not \object
			l "[warn] Hotload only works with objects, #relPath will not be reloaded"
			return _module
		else
			_module.hlInit?.apply this, args

			callback?(_module)

			l "fileHandlers[#relPath] = "+fileHandlers[absPath]
			if not fileHandlers[absPath]
				l "Attaching to #relPath"
				fileHandlers[absPath] = onFileChange absPath, ->
					module.exports absPath,callback

			return _module

	# Reload case
	else

		l "Reloading #relPath"

		# All below code HAS to be synchronous!
		# If node goes multi-threading this will be fun!

		# In hlUnload you should put code that stops all
		# event listeners, stops all asynchronous tasks
		# (like setInterval) so that before unloading
		# the module it will stop doing anything.
		# 
		# Otherwise after few hot reloads you will get
		# errors that too many event listeners (yes they will
		# pile up).
		require.cache[absPath].exports.hlUnload?!

		# Remove all previous module properties by setting them
		# to null so that garbage collector can remove them from
		# the face of the galaxy! (See: http://stackoverflow.com/a/5328761/1637178)
		for k in require.cache[absPath].exports
			require.cache[absPath].exports[k] = null

		# If it is available call garbage collector.
		# In order to make it available execute node
		# with --expose_gc option.
		global.gc?!

		# delete properties
		for k in require.cache[absPath].exports
			delete require.cache[absPath].exports[k]

		absTmpPath = absPath + ".tmp"

		# Reattach original module reference in require.cache
		# so that when we call `require` it will load
		# module from disk, not from cache AND we still
		# have application-wide object references that
		# we will replace with newly loaded properties.
		# 
		# [move to readme][You may think that we could just delete module from
		# cache and then require(), but then we would loose
		# all references to properties that were exposed
		# in the first require (check the docs if it is not clear)]
		require.cache[absTmpPath] = require.cache[absPath]
		delete require.cache[absPath]

		# Load new version of module.
		moduleOptional = moduleLoader(relPath, absPath)

		if not moduleOptional.isPresent()
			return
		else
			_module = moduleOptional.get()
		

		# Reattach back the original module reference
		# so that application-wide references are not lost
		# and made useless.
		require.cache[absPath] = require.cache[absTmpPath]
		delete require.cache[absTmpPath]

		## replace all references from require.cache[absPath] with require.cache[absTmpPath]
		# for k in require.cache[absTmpPath]
		# 	require.cache[absPath][k] = require.cache[absTmpPath][k]

		# In the original module reference replace all
		# properties with new properties of recently
		# loaded newer version of module (stored in _module).
		for k in _module
			require.cache[absPath].exports[k] = _module[k]

		# Execute module initializer.
		require.cache[absPath].exports.hlInit?.apply this, args
		
		# Execute callback
		callback?(require.cache[absPath].exports)

		# Return module reference
		return require.cache[absPath].exports

# stop watching module in libPath
module.exports.stop = !(libPath)->
	absPath = resolveCalledFilename libPath, 2
	h = fileHandlers[absPath]
	if h then
		l "Stopping watch at #libPath"
		h.close?!
		delete fileHandlers[absPath]